{ config, pkgs, ... }:

# let
#   # unstable = import <unstable> {};
#   nixvim = import (builtins.fetchGit {
#     url = "https://github.com/nix-community/nixvim";
#     # rev = "";
#     # ref = "main";
#     rev = "9e04eb3c3c6fcb6ea31e4d3633ea5fd7378906cb";
#     # sha256 = "0p6bd79jwrh8c3l6svghj08kc1cg0hhd0zawrx76mq1ppr979g9v";
#     # sha256 = "07qxkqzdgmf6yj0fa3n499lmazxbf5saqa2mqns9drg9yk485ii0";
#     # ref = "master";
#     # If you are not running an unstable channel of nixpkgs, select the corresponding branch of nixvim.
#     # ref = "nixos-23.11";
#   });
# in
{
  # TODO please change the username & home direcotry to your own
  home.username = "kurtl";
  home.homeDirectory = "/home/kurtl";

  # thing = nixvim;
  #nixvim = import (builtins.fetchTarball {
  #  url = "https://github.com/nix-community/nixvim";
  #  # rev = "9e04eb3c3c6fcb6ea31e4d3633ea5fd7378906cb";
  #  sha256 = "07qxkqzdgmf6yj0fa3n499lmazxbf5saqa2mqns9drg9yk485ii0";
  #});

  # imports = [
  #   nixvim.homeManagerModules.nixvim
  #   # nixvim.nixosModules.nixvim
  # ];

  # inputs.nixvim = {
  #   url = "github:nix-community/nixvim";
  #   # If you are not running an unstable channel of nixpkgs, select the corresponding branch of nixvim.
  #   # url = "github:nix-community/nixvim/nixos-23.05";

  #   inputs.nixpkgs.follows = "nixpkgs";
  # };

  # link the configuration file in current directory to the specified location in home directory
  # home.file.".config/i3/wallpaper.jpg".source = ./wallpaper.jpg;

  # link all files in `./scripts` to `~/.config/i3/scripts`
  # home.file.".config/i3/scripts" = {
  #   source = ./scripts;
  #   recursive = true;   # link recursively
  #   executable = true;  # make all files executable
  # };

  # encode the file content in nix configuration file directly
  # home.file.".xxx".text = ''
  #     xxx
  # '';

  # set cursor size and dpi for 4k monitor
  #xresources.properties = {
  #  "Xcursor.size" = 16;
  #  "Xft.dpi" = 172;
  #};

  # programs.nixvim = {
  #   enable = true;

  #   # colorschemes.gruvbox.enable = true;
  #   # plugins.lightline.enable = true;
  # };

  # basic configuration of git, please change to your own
  programs.git = {
    enable = true;
    userName = "Kurt Lippert";
    userEmail = "kurtlippert@gmail.com";
  };

  # Packages that should be installed to the user profile.
  home.packages = with pkgs; [
    # a tmux thing I got from an example project
    # (pkgs.writeShellApplication {
    #   name = "pux";
    #   runtimeInputs = [ pkgs.tmux ];
    #   text = ''
    #     PRJ="''$(zoxide query -i)"
    #     echo "Launching tmux for ''$PRJ"
    #     set -x
    #     cd "''$PRJ" && \
    #       exec tmux -S "''$PRJ".tmux attach
    #   '';
    # })
  
    # here is some command line tools I use frequently
    # feel free to add your own or remove some of them
    bubblewrap
    direnv
    git
    helix
    neovim
    # niv
    nix-direnv
    nodejs
    oh-my-zsh
    opam
    wl-clipboard
    zsh-powerlevel10k

    # editor
    # nixvim

    neofetch
    nnn # terminal file manager

    # archives
    zip
    xz
    unzip
    p7zip

    # utils
    fd # better 'find' utility
    ripgrep # recursively searches directories for a regex pattern
    #jq # A lightweight and flexible command-line JSON processor
    #yq-go # yaml processer https://github.com/mikefarah/yq
    exa # A modern replacement for ‘ls’
    #fzf # A command-line fuzzy finder

    # networking tools
    #mtr # A network diagnostic tool
    #iperf3
    #dnsutils  # `dig` + `nslookup`
    #ldns # replacement of `dig`, it provide the command `drill`
    #aria2 # A lightweight multi-protocol & multi-source command-line download utility
    #socat # replacement of openbsd-netcat
    #nmap # A utility for network discovery and security auditing
    #ipcalc  # it is a calculator for the IPv4/v6 addresses

    # misc
    # cowsay
    #file
    #which
    tree
    #gnused
    #gnutar
    #gawk
    #zstd
    #gnupg

    # nix related
    #
    # it provides the command `nom` works just like `nix
    # with more details log output
    nix-output-monitor

    # productivity
    #hugo # static site generator
    #glow # markdown previewer in terminal
    tmux

    #btop  # replacement of htop/nmon
    #iotop # io monitoring
    #iftop # network monitoring

    # system call monitoring
    #strace # system call monitoring
    #ltrace # library call monitoring
    #lsof # list open files

    # system tools
    #sysstat
    #lm_sensors # for `sensors` command
    #ethtool
    #pciutils # lspci
    #usbutils # lsusb
    fswatch
  ];

  # imports? (sometimes we do this?)
  # imports = [
  #   nixvim.homeManagerModules.nixvim
  # ];

  # programs.nixvim.enable = true;

  # # starship - an customizable prompt for any shell
  # programs.starship = {
  #   enable = true;
  #   settings = {
  #     add_newline = false;
  #     aws.disabled = true;
  #     gcloud.disabled = true;
  #     line_break.disabled = true;
  #   };
  # };

  # alacritty - a cross-platform, GPU-accelerated terminal emulator
  programs.alacritty = {
    enable = true;
    settings = {
      env.TERM = "xterm-256color";
      font = {
        size = 12;
        draw_bold_text_with_bright_colors = true;
      };
      window = {
        dimensions = {
          columns = 208;
          lines = 48;
        };
        padding = {
          x = 5;
          y = 5;
        };
        decorations = "none";
        startup_mode = "Windowed";
      };
      scrolling.multiplier = 5;
      selection.save_to_clipboard = true;
      shell = {
        program = "/etc/profiles/per-user/kurtl/bin/zsh";
      };
      colors = {
        primary = {
          background = "0x1E1D2F";
          foreground = "0xD9E0EE";
        };
        cursor = {
          text = "0x1E1D2F";
          cursor = "0xF5E0DC";          
        };
        normal = {
          black = "0x6E6C7E";
          red = "0xF28FAD";
          green = "0xABE9B3";
          yellow = "0xFAE3B0";
          blue = "0x96CDFB";
          magenta = "0xF5C2E7";
          cyan = "0x89DCEB";
          white = "0xD9E0EE";
        };
        bright = {
          black = "0x988BA2";
          red = "0xF28FAD";
          green = "0xABE9B3";
          yellow = "0xFAE3B0";
          blue = "0x96CDFB";
          magenta = "0xF5C2E7";
          cyan = "0x89DCEB";
          white = "0xD9E0EE";
        };
        theme = "Catppuccin";
        indexed_colors = [
          { index = 16; color = "0xF8BD96"; }
          { index = 17; color = "0xF5E0DC"; }
        ];
      };
    };
  };

  # modal text editor to replace neovim (trying it out these days)
  programs.helix = {
    enable = true;

    # translate my toml helix config to nix
    settings = {
      theme = "catppuccin_mocha";
      editor = {
        line-number = "relative";
        mouse = false;
        bufferline = "always";
        cursor-shape = {
          insert = "bar";
          normal = "block";
          select = "underline";
        };
        file-picker = {
          hidden = false;
        };
      };
      keys.normal = {
        esc = ["collapse_selection" "keep_primary_selection"];
      };
    };
  };

  # programs.neovim = {
  #   enable = true;
  #   defaultEditor = true;
  #   plugins = [
  #     # pkgs.vimPlugins.LazyVim
  #     {
  #       plugin = pkgs.vimPlugins.LazyVim;

  #     };
  #   ];
  #   extraConfig = ''

  #   '';
  # };

  programs.zsh = {
    enable = true;
    enableCompletion = true;

    shellAliases = {
      # little shortcut for getting to "home" and "configuration" nix files
      # for helix
      hxh = "sudo -E hx /etc/nixos/home.nix";    
      hxc = "sudo -E hx /etc/nixos/configuration.nix";   

      # for neovim
      nvimh = "sudo -E nvim /etc/nixos/home.nix";
      nvimc = "sudo -E nvim /etc/nixos/configuration.nix";
    };

# bind-key C-r source-file ~/.tmux.conf \; display "Config Reloaded !"
    

    oh-my-zsh = {
      enable = true;
      plugins = [ "git" ];
    };

    # manage zsh plugins manually via nix home-manager
    plugins = [
      {
        name = "zsh-nix-shell";
        file = "nix-shell.plugin.zsh";
        src = pkgs.fetchFromGitHub {
          owner = "chisui";
          repo = "zsh-nix-shell";
          rev = "v0.5.0";
          sha256 = "0za4aiwwrlawnia4f29msk822rj9bgcygw6a8a6iikiwzjjz0g91";
        };
      }
      {
        name = "powerlevel10k";
        src = pkgs.zsh-powerlevel10k;
        file = "share/zsh-powerlevel10k/powerlevel10k.zsh-theme";
      }
    ];
    localVariables = {
      POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true;
    };
    initExtra = ''
      [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

      # exit tmux alias
      function tmxe() { tmux kill-server; }

      # split window horizontal
      function tmxh() { tmux split-window -h }

      # split window vertical
      function tmxv() { tmux split-window -v; }

      function hemux() {
        PANES=$(tmux list-panes | wc -l)
        # echo $PANES
        if [ "$PANES" -gt 1 ]
          then
            tmux send-keys -t 2 $1 Enter
          else
            tmux split-window -h
            tmux send $1 Enter
        fi
        echo "$1" > /tmp/prev-tmux-command
      }
    '';
  };

  #programs.bash = {
  #  enable = true;
  #  enableCompletion = true;
  #  bashrcExtra = ''
  #    export PATH="$PATH:$HOME/bin:$HOME/.local/bin:$HOME/go/bin"
  #  '';

  programs.tmux = {
    enable = true;
    # shortcut = "a";
    shell = "${pkgs.zsh}/bin/zsh";
    # aggressiveResize = true; -- Disabled to be iTerm-friendly
    baseIndex = 1;
    newSession = true;
    # Stop tmux+escape craziness.
    escapeTime = 0;
    # Force tmux to use /tmp for sockets (WSL2 compat)
    secureSocket = false;

    plugins = with pkgs; [
      tmuxPlugins.better-mouse-mode
      tmuxPlugins.catppuccin
    ];

    extraConfig = ''
      # https://old.reddit.com/r/tmux/comments/mesrci/tmux_2_doesnt_seem_to_use_256_colors/
      set -g default-terminal "xterm-256color"
      set -ga terminal-overrides ",*256col*:Tc"
      set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
      set-environment -g COLORTERM "truecolor"

      # set default shell as zsh
      # set -g default-shell ${pkgs.zsh}

      # remap prefix from 'C-b' to 'M-f'
      unbind C-a
      set-option -g prefix M-f
      bind-key M-f send-prefix

      # Mouse works as expected
      set-option -g mouse on
      # easy-to-remember split pane commands
      # bind | split-window -h -c "#{pane_current_path}"
      # bind - split-window -v -c "#{pane_current_path}"
      # bind c new-window -c "#{pane_current_path}"

      # switch panes using Alt-arrow without prefix
      # bind -n M-Left select-pane -L
      # bind -n M-Right select-pane -R
      # bind -n M-Up select-pane -U
      # bind -n M-Down select-pane -D

      # resize panes using alt-<vim_keys> without prefix
      # bind -n M-h resize-pane -L 5
      # bind -n M-l resize-pane -R 5
      # bind -n M-k resize-pane -U 5
      # bind -n M-j resize-pane -D 5

      # switch panes using alt-<vim_mov_keys> without prefix
      bind -n M-h select-pane -L
      bind -n M-l select-pane -R
      bind -n M-k select-pane -U
      bind -n M-j select-pane -D

      # resize panes using alt-L_Shift-<vim_mov_keys> without prefix
      bind -n M-H resize-pane -L 5
      bind -n M-L resize-pane -R 5
      bind -n M-K resize-pane -U 5
      bind -n M-J resize-pane -D 5
    '';
  };

  # programs.tmate = {
  #   enable = true;
  #   # FIXME: This causes tmate to hang.
  #   # extraConfig = config.xdg.configFile."tmux/tmux.conf".text;
  # };

  # home.packages = [
  #   # Open tmux for current project.
  #   (pkgs.writeShellApplication {
  #     name = "pux";
  #     runtimeInputs = [ pkgs.tmux ];
  #     text = ''
  #       PRJ="''$(zoxide query -i)"
  #       echo "Launching tmux for ''$PRJ"
  #       set -x
  #       cd "''$PRJ" && \
  #         exec tmux -S "''$PRJ".tmux attach
  #     '';
  #   })
  # ];  

  # programs.tmux = {
  #   enable = true;
  #   clock24 = true;
  # extraConfig = '' # used for less common options, intelligently combines if defined in multiple places.
  #   ...
  #   '';
  # };

    # set some aliases, feel free to add more or remove some
  # shellAliases = {
  #   tmx = "~/.config/tmux/startup.sh";
  #   # urldecode = "python3 -c 'import sys, urllib.parse as ul; print(ul.unquote_plus(sys.stdin.read()))'";
  #   # urlencode = "python3 -c 'import sys, urllib.parse as ul; print(ul.quote_plus(sys.stdin.read()))'";
  #   # httpproxy = "export https_proxy=http://127.0.0.1:7890; export http_proxy=http://127.0.0.1:7890;";
  # };

  # This value determines the home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update home Manager without changing this value. See
  # the home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "23.11";

  # Let home Manager install and manage itself.
  programs.home-manager.enable = true;
}
